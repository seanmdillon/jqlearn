Searching DOM

$("#destinations li");
$("#destinations > li");
$("#destinations > li:first");
$("#destinations > li:even");
$(".class1, .class2");

Traversting the DOM
Find method:
$('li.item-ii').find('li').css('background-color', 'red');


$("li").first();
$("li").first().next();  -- this is called method chaining
$("li").first().next().prev();

you can also walk UP the DOM
$("li").first();
$("li").first().parent();  -- this selects the unordered list parent of LI

walking DOWN
$("#destinations").children("li");



$(document).ready(function() {
  var price = $('<p>From $399.99</p>');
  $('.vacation').append(price); -- NO
  $('.vacation').prepend(price); -- NO
  $('.vacation').before(price); -- NO
  $('.vacation').after(price);

  $('button').remove();

});


DOM for our page:

DOCUMENT

li	class="vacation"
   h2
      Hawaiian Vacation

   button
      Get Price



$('button')

We're going to use the jQuery Object Method .on()
	- .on(<event>, <event handler function>);

$('button').on('click', function() {
  // runs when any button is clicked
});


$('button') targetrs all buttons.
.on('click' runs when the button is clicked
function() is the code in the handler

$(document).ready(function() {
  $('button').on('click', function() {
    var price = $('<p>From $399.99</p>');
    $('.vacation').append(price);
    $('button').remove();
  });
});



Not we're going to learn about localizing the code execution.
Here's the new DOM:

document
  div id="vacations"
    ul
      li class="vacation"
        button
        p
      li class="vacation"
        button
        p

so if i use a selector $('.vacation').append(price);
  it adds var price to EVERY list item
and if i call $('button').remove();
  it removes EVERY button

so i want to use THIS
  we'd usually think we can call this.remove(); in the button code, but this won't work
    this is because "this" is not a jquery object.  so we have to wrap it in jquery code
    $(this).remove();
  so if i write this code in my function, here's where it gets to:

$(document).ready(function() {
  $('button').on('click', function() {
    var price = $('<p>From $399.99</p>');
    $('.vacation').append(price);
    $(this).remove();  // this ONLY removes THIS button that was clicked
  });
});

unfortunately, that still adds var price to EVERY button
  so we have to localize where to add price:

  change:
    $('.vacation').append(price);
  to:
    $(this).after(price);

Using .closest(<selector>)

$(this).after(price);                        // NO
$(this).parent().parent().append(price);     // seems to be okay, but what if the DOM changes
$(this).parents('.vacation').append(price);  // NO
$(this).closest('.vacation').append(price);  // YAY
  "closest" looks for the nearest ancestor w/ <selector>
  "closest" is going to find zero or one node, whereas parents is going to look for ALL ancestors w/ proper class





<div id="tours">
  <h1>Guided Tours</h1>
  <ul>
    <li class="usa tour">
      <h2>New York, New York</h2>
      <span class="details">$1,899 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
    <li class="europe tour">
      <h2>Paris, France</h2>
      <span class="details">$2,299 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
    <li class="asia tour">
      <h2>Tokyo, Japan</h2>
      <span class="details">$3,799 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
  </ul>
</div>

$(document).ready(function(){
  $('li').on('click', function(){
    var message = $("<span>Call 1-555-jquery-air to book this tour</span>");
    $(this).append(message);
    $(this).find('.book').remove();
  });
});



TRAVERSING AND FILTERING
Refactoring 'Get Price'


// application.js
$(document).ready(function() {
	$('button').on('click', function() {
		var price = $('<p>From $399.99</p>'); // we don't like this line;
		$(this).closest('.vacation').append(price);
		$(this).remove();
	});
});

// INSTEAD, we like
var amount = $(this).closest('.vacation').data('price');
				* 'price' *Reads from the data-price attribute*
var price = $('<p>From $' + amount + '</p>');

.data(<name>) retrieves the value of attribute <name>
.data(<name>, <value>) sets the value <value> of attribute <name>

$('vacation').first().data('price');
(as an example)


REFACTORING 'GET PRICE'
$(document).ready(function(){
  $('button').on('click', function(){
    var price = $('<p>From $399.99</p>'); // instead of this
    $(this).closest('.vacation').append(price);
    $(this).remove();
  });
});

// we'll do this
    // grab the price attribute of the closes vacation class inside a button click
    //  this results in each vacation having its own price based on the .closest('.vacation')
    var amount = $(this).closest('.vacation').data('price');

    // now use this value to construct the new message
    var price = $('<p>From $' + amount + '</p>');


// NEXT, we can see that in the application.js, we're duplicating the jquery fetch for (this).closest('.vacation')
// refactored, it looks like this:

	var vacation = $(this).closes('.vacation');
	var amount = vacation.data('price');
	vacation.append(price);
	$(this).remove();

// only querying the DOM once makes the code faster.  IMPORTANT!



ON WITH A SELECTOR

// but hey, what if we start adding more buttons to the page?
// we *could* use a class selector such as
$('.vacation button').on('click', function() {});

// but there's a better way...
we can select out the class, and then specify what kind of click events we want to listen for:
$('.vacation').on('click', 'button', function() {});

// this is called ***EVENT DELEGATION***!  We're only targeting buttons that are INSIDE the vacation class
//		.on('click', 'button', function() {})
//		** only catch button clicks on the button class inside the parent selector (.vacation)


**EXPLAINED AGAIN**
// application.js
//  this listens for click events inside button elements
//  if we add new buttons anywhere, they will trigger this click handler, though!
$(document).ready(function() {
  $('button').on('click', function() {
  ...
  });
});

// we *could* do this, but there's a better way to do it
$('.vacation button').on('click', function() {});

// instead, fetch nodes of .vacation class, and add an event handler to button elements
//  hiphiphooray
$('.vacation').on('click', 'button', function() {});




FILTERS
<div id='filters'>
	...
	<button class='onsale-filter'>On Sale Now</button>
	<button class='expiring-filter'>Expiring Soon</button>
	...
</div>


// we'll traverse the DOM and look for the filters ID (denoted by the # sign, below),
//  and use event delegation to add a click handler to the onsale-filter class:
$('#filters').on('click', '.onsale-filter', function(){
  // find all vacations that are on-sale
  // add a class to these variables
});

so how do we select the elements that are onsale?
we *could* just use a selector to traverse the DOM:
  $('.vacation.onsale')

but instead, we'll use filtering...
  // this selects the nodes in the DOM that are of class vacation, and filters them
  //  to only select the elements that have the onsale class
  $('.vacation').filter('.onsale')

// code becomes
$('#filters').on('click', '.onsale-filter', function(){
  // find all vacations that are on-sale
  $('.vacation').filter('.onsale')

  // add a class to these variables
});

Now we need to add a class to the elements found... so we can do that in jQuery using the add a class method
.addClass(<class>)
.removeClass(<class>)

So with that.. our code becomes
$('#filters').on('click', '.onsale-filter', function(){
  // find all vacations that are on-sale
  $('.vacation').filter('.onsale').addClass('highlighted'));
});



<div id="tours">
  <h1>Guided Tours</h1>
  <ul>
    <li class="usa tour" data-discount="299">
      <h2>New York, New York</h2>
      <span class="details">$1,899 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
    <li class="europe tour" data-discount="176">
      <h2>Paris, France</h2>
      <span class="details">$2,299 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
    <li class="asia tour" data-discount="349">
      <h2>Tokyo, Japan</h2>
      <span class="details">$3,799 for 7 nights</span>
      <button class="book">Book Now</button>
    </li>
  </ul>
</div>




`
ON DOM LOAD
now we're going to do some interesting show and remove info on a page

index.html:
  <li class="confirmation">
    ...
    <button>FLIGHT DETAILS</button>  <!-- when clicking on this button... -->
    <ul class="ticket">...</ul>  <!-- ...we'll show this ticket -->
  </li>

in order to do this, we need to first start by creating the ticket class and hiding the data
.ticket {
  display: none; // hides ticket on page load
}

now we need to:
- watch for the click event
- find the ul w/ class ticket
- show it

$('.confirmation').on('click', 'button', function() {
  $(this).closest('.confirmation').find('ticket') 
  //first search up through ancestors, then search down for ticket
}

then he talks about alerting as a mechanism for debugging.  introduces .length on a DOM element:
$('li').length;

alert($('button').length);

within the click handler, we want to call .slideDown() on the class to show it and add some animation to the action

$(document).ready(function() {
  alert($('button').length);
  $('.confirmation').on('click', 'button', function() {
    $(this).closest('.confirmation').find('.ticket').slideDown();
  });
});

-- alternatively.. try this:
$(document).ready(function() { 
  $('#tour').on('click', 'button', function() { 
    $('.photos').slideDown(); // or $('.photos').slideToggle();
  });
});


EXPANDING ON ON()
Now we're going to do some hovering

We've already seen most of the code we need to make a hover/display event take place
$(document).ready(function(){
  $('.confirmation').on('click', 'button', function() {
    $(this).closest('.confirmation').find('.ticket').slideDown();
  });
});

so now it's grabbing the DOM element, listening for events on the element that we want to hover over...
$(document).ready(function(){
  $('.confirmation').on('click', 'button', function() {
    $(this).closest('.confirmation').find('.ticket').slideDown();
  });
  $('.confirmation').on('?', 'h3', function() {
    $(this).closest('.confirmation').find('.ticket').slideToggle();
  });
});

There are a boatload of mouse events you can listen for:
click
dblclick
focusin
focusout
mousedown
mouseup
mousemove
mouseout
mouseover
mouseleave
mouseenter


  // so we'll use "mouseenter" which fires right when the mouse hovers over the element
  $('.confirmation').on('mouseenter', 'h3', function() {
    $(this).closest('.confirmation').find('.ticket').slideToggle();
  });

now we talk about refactoring this "show ticket" functionality by moving the dom selector w/ action into a function:

function showTicket() {
  $(this).closest('.confirmation').find('.ticket').slideToggle();
}

so that moves to the top of the application.js and our new event handlers look like this:

$(document).ready(function(){
  $('.confirmation').on('click', 'button', showTicket);
  $('.confirmation').on('?', 'h3', showTicket);
});

NOTE WE DONT USE PARENS... THIS WOULD MAKE THE FUNCTION FIRE IMMEDIATELY. WE WANT IT TO FIRE ON THE EVENT ACTION WHEN THE 
FUNCTION IS PASSED!

interesting, you can add multiple event handlers to a single selector:
function showPhotos() {
  $(this).find('span').slideToggle();
}

$(document).ready(function() { 
  $('#tour').on('click', 'button', function() { 
    $('.photos').slideToggle();
  });
  $('.photos').on('mouseenter', 'li', showPhotos)
              .on('mouseleave', 'li', showPhotos);
});


KEYBOARD EVENTS
on a web page...
changing a quantity on the page in a text field

So here's the HTML

<div class="vacation" data-price='399.99'>
  <h3>Hawaiian Vacation</h3>
  <p>$399.99 per ticket</p>
  <p>
    Tickets:
    <input type='number' class='quantity' value='1' />
  </p>
</div>
<p>Total Price: $<span id='total'>399.99</span></p>

We need to make it so when the input updates, the total price at the bottom of the page updates as well in the #total span
So we need to listen on the .quantity class in the input field somehow

$(document).ready(function(){
  $('.vacation').on('?', '.quantity', function(){

  });
});

Keyboard events:
keypress, keyup, keydown
// http://api.jquery.com/category/events/keyboard-events/

Form events:
blur, focus, select, submit, change
// http://api.jquery.com/category/events/form-events/

In our case, listen to "keyup"

$('.vacation').on('keyup', '.quantity', function() {
  // get price
  // get quantity entered
  // set the total to price * quantity
}

var price = $(this).closest('.vacation').data('price');
  = '399.99

This returns a string, but we need to make it a number.....  ADD A PLUS TO THE BEGINNING OF THE SELECTOR

var price = +$(this).closest('.vacation').data('price');
  = 399.99





















